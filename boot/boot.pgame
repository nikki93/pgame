do local _={
 {
  _id="f5e638cc78dd325906c12",
  _name="entity",
  _proto_ids={},
  meta__method_entries={
   saveload=false
  },
  meta__sub_ids={
   saveload=false
  }
 },
 {
  _doc=" can update with the passage of time\n\n     rsubs of this can be notified of the passage of time per frame by\n     implementing `update.update` ",
  _id="3ac340832f29c11538fbe",
  _name="update",
  _proto_ids={
   "f5e638cc78dd325906c12"
  }
 },
 {
  _doc=" may be notified of input events\n\n     rsubs of this may be notified of love input events:\n       events are added using `input.register_events` ",
  _id="a43c1b0aa53a0c908810c",
  _name="input",
  _proto_ids={
   "f5e638cc78dd325906c12"
  }
 },
 {
  _doc=" is notified of input events\n\n     rsubs of this are notified of love keyboard, mouse and joystick button\n     events:\n       they respond by implementing `input.keypressed`, `input.keyreleased`,\n       `input.mousepressed`, `input.mousereleased`, `input.joystickpressed` or\n       `input.joystickreleased`, with parameters same as the love events ",
  _id="7b33a58d49a4f0c9490d5",
  _name="inputting",
  _proto_ids={
   "a43c1b0aa53a0c908810c"
  }
 },
 {
  _doc=" gets notified of frame updates ",
  _id="836049b9edffe94612838",
  _name="updating",
  _proto_ids={
   "3ac340832f29c11538fbe"
  }
 },
 {
  _doc=" can be drawn to a render target\n\n     rsubs of this can be drawn by implementing `drawable.draw`:\n       they are automatically drawn to the main window through the main camera\n       per frame, and can also be drawn to other targets from other viewports\n       (see `drawable.draw_rsubs`, `camera`)\n\n       use `drawing.depth` to determine draw order, and whether an entity\n       ignores viewport orientation (eg. for HUD elements) ",
  _id="c571a3227368b17e0ecc3",
  _name="drawable",
  _proto_ids={
   "f5e638cc78dd325906c12"
  },
  depth=100,
  meta_depth={
   doc=" determines draw order with lower depth drawn on top, entities with\n            negative depth ignore the view transform (eg. for HUD elements) "
  }
 },
 {
  _doc=" drawn to the main window per frame ",
  _id="d8eb87629476878cb0ec2",
  _name="drawing",
  _proto_ids={
   "c571a3227368b17e0ecc3"
  }
 },
 {
  _doc=" is updating and visible\n\n     rsubs of this are updated and drawn each frame (see `updating` and\n     `drawing`) ",
  _id="7bd3d5f5b3cdb13aed632",
  _name="alive",
  _proto_ids={
   "836049b9edffe94612838",
   "d8eb87629476878cb0ec2"
  }
 },
 {
  _doc=" has world-space position, rotation and scale ",
  _id="d825c53d89d9cacb3e034",
  _name="transform",
  _proto_ids={
   "f5e638cc78dd325906c12"
  },
  meta_position={
   doc="world-space position"
  },
  meta_rotation={
   doc="world-space rotation"
  },
  meta_scale={
   doc="world-space scale"
  },
  position=vec2(0,0),
  rotation=0,
  scale=vec2(1,1)
 },
 {
  _doc=" provide a viewport to visualize the world\n\n     rsubs of this give a viewport for `drawable` to visualize the world:\n       the viewport is a rectangle of the same pixel size as the visualization\n       target (like the main window), oriented by `transform` trait ",
  _id="dd6d2dcc679d12b9430a9",
  _name="camera",
  _proto_ids={
   "d825c53d89d9cacb3e034"
  }
 },
 {
  _doc=" the default camera for the main window ",
  _id="c1498e9744ffa104e2c58",
  _name="main_camera",
  _proto_ids={
   "dd6d2dcc679d12b9430a9"
  }
 }
}
return _
end